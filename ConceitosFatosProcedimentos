# Plano de Estudo: Curso Completo de Programação e Desenvolvimento

## Semana 1-2: Fundamentos de Programação e Introdução a C/C++

| **Tópico**                                                | **Conceitos**                                                                                                   | **Fatos**                                                                                                 | **Procedimentos**                                                                                                                                                               |
|-----------------------------------------------------------|----------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| **Introdução à lógica de programação**                    | Lógica de programação, algoritmos, fluxogramas, pseudocódigos                                                  | Diferença entre variáveis locais e globais, operadores aritméticos vs. lógicos                            | Escrever algoritmos simples, criar fluxogramas, implementar loops e condicionais em C/C++                                                                                        |
| **Introdução à linguagem C/C++**                          | Sintaxe, variáveis, operadores, estrutura de um programa simples                                               | Diferença entre variáveis de tipo primitivo e compostas, operadores de C/C++                              | Escrever programas simples que utilizam variáveis e operadores, compilar e executar código C/C++                                                                                  |
| **Estruturas básicas de programação**                     | Estruturas de controle: if, else, switch, loops (for, while, do-while)                                         | Estruturas de controle sequencial, condicional e repetitiva                                               | Implementar programas com estruturas de controle para resolver problemas práticos                                                                                                 |

## Semana 3-4: Avanço em C/C++ e Introdução à Orientação a Objetos

| **Tópico**                                                | **Conceitos**                                                                                                   | **Fatos**                                                                                                 | **Procedimentos**                                                                                                                                                               |
|-----------------------------------------------------------|----------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| **Funções e modularidade em C/C++**                       | Funções, modularidade, declaração e definição de funções, passagem de parâmetros                               | Diferença entre funções e procedimentos, escopo de variáveis                                              | Criar e utilizar funções modulares para organizar o código, passar parâmetros por valor e referência                                                                             |
| **Ponteiros e alocação dinâmica de memória**              | Ponteiros, alocação dinâmica de memória, operações com ponteiros                                               | Diferença entre ponteiros e variáveis comuns, tipos de alocação de memória (malloc, calloc, realloc, free) | Manipular ponteiros para acessar e modificar dados, alocar e desalocar memória dinamicamente                                                                                     |
| **Introdução à programação orientada a objetos (OO)**     | Conceitos de OO, objetos, classes, atributos, métodos, diferença entre programação estruturada e OO            | Diferença entre programação estruturada e orientada a objetos                                             | Criar classes e objetos, definir atributos e métodos básicos, comparar vantagens da programação orientada a objetos                                                              |

## Semana 5-6: Programação Orientada a Objetos em C++

| **Tópico**                                                | **Conceitos**                                                                                                   | **Fatos**                                                                                                 | **Procedimentos**                                                                                                                                                               |
|-----------------------------------------------------------|----------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| **Classes e objetos em C++**                              | Definição de classes, criação de objetos, membros de dados e funções                                           | Diferença entre atributos (membros de dados) e métodos (funções)                                          | Definir classes com atributos e métodos, instanciar objetos e acessar seus membros                                                                                               |
| **Encapsulamento e acesso a membros**                     | Encapsulamento, modificadores de acesso (public, private, protected), getters e setters                        | Diferença entre os níveis de acesso (público, privado, protegido)                                         | Implementar encapsulamento usando modificadores de acesso, criar métodos getters e setters para controlar o acesso a atributos                                                    |
| **Construtores e destrutores**                            | Construtores, destrutores, inicialização de objetos, gerenciamento de memória                                  | Função de construtores e destrutores, diferença entre sobrecarga de construtores                           | Implementar construtores e destrutores para inicializar e liberar recursos de objetos, sobrecarregar construtores para diferentes cenários                                        |

## Semana 7-8: Conceitos Avançados de Orientação a Objetos

| **Tópico**                                                | **Conceitos**                                                                                                   | **Fatos**                                                                                                 | **Procedimentos**                                                                                                                                                               |
|-----------------------------------------------------------|----------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| **Herança e polimorfismo**                                | Herança, polimorfismo, reutilização de código, especialização de classes                                       | Diferença entre herança simples e múltipla, polimorfismo em tempo de compilação vs. tempo de execução       | Criar hierarquias de classes com herança, implementar polimorfismo usando classes base e derivadas, utilizar a palavra-chave `virtual` para métodos polimórficos                 |
| **Classes abstratas e interfaces**                        | Classes abstratas, interfaces, contratos de implementação, modelos de classes                                  | Diferença entre classes abstratas e interfaces, papel das interfaces em C++                                | Definir classes abstratas com métodos puros, implementar interfaces em classes derivadas, usar polimorfismo com interfaces                                                      |
| **Sobrecarga de operadores e funções**                    | Sobrecarga de operadores, sobrecarga de funções, operações personalizadas com objetos                          | Diferença entre operadores sobrecarregados e funções sobrecarregadas                                       | Implementar sobrecarga de operadores para operações personalizadas, criar múltiplas versões de funções com diferentes assinaturas                                                |

## Semana 9-10: Estruturas de Dados e Algoritmos

| **Tópico**                                                | **Conceitos**                                                                                                   | **Fatos**                                                                                                 | **Procedimentos**                                                                                                                                                               |
|-----------------------------------------------------------|----------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| **Revisão de estruturas de dados em C/C++**               | Arrays, listas ligadas, pilhas, filas, estruturas de dados lineares e não lineares                             | Diferença entre arrays estáticos e dinâmicos, operação de pilhas e filas                                  | Implementar estruturas de dados básicas como arrays, listas ligadas, pilhas e filas, manipular dados usando operações comuns dessas estruturas                                    |
| **Introdução a algoritmos e complexidade computacional**  | Algoritmos, análise de complexidade, complexidade de tempo e espaço                                            | Diferença entre complexidade O(1), O(n), O(log n), tipos de algoritmos de ordenação (ex: Bubble Sort, QuickSort) | Implementar e analisar algoritmos de ordenação e busca, calcular complexidade de algoritmos, comparar eficiência de diferentes algoritmos de ordenação                            |

## Semana 11-12: Banco de Dados e Desenvolvimento Web

| **Tópico**                                                | **Conceitos**                                                                                                   | **Fatos**                                                                                                 | **Procedimentos**                                                                                                                                                               |
|-----------------------------------------------------------|----------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| **Introdução a bancos de dados relacionais e SQL**        | Modelagem de dados, SQL, operações CRUD (Create, Read, Update, Delete)                                         | Diferença entre bancos de dados relacionais e não relacionais, funções de operações CRUD                  | Criar, ler, atualizar e excluir dados usando SQL, modelar bancos de dados relacionais, realizar consultas básicas e avançadas em SQL                                            |
| **Desenvolvimento web básico: HTML, CSS, JavaScript**     | HTML para estruturação, CSS para estilização, JavaScript para interatividade                                   | Diferença entre HTML, CSS e JavaScript, função de cada tecnologia na web                                  | Criar páginas web com HTML, aplicar estilos com CSS, adicionar interatividade com JavaScript, implementar formulários e validar entradas de usuários                              |

## Semana 13-14: Avanço em Desenvolvimento Web e Projeto Prático

| **Tópico**                                                | **Conceitos**                                                                                                   | **Fatos**                                                                                                 | **Procedimentos**                                                                                                                                                               |
|-----------------------------------------------------------|----------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| **Frameworks e bibliotecas web**                          | Frameworks front-end e back-end, bibliotecas de JavaScript, design responsivo, manipulação do DOM              | Diferença entre frameworks e bibliotecas, papel do Bootstrap e jQuery                                     | Utilizar frameworks como Bootstrap para design responsivo, manipular o DOM com jQuery, integrar bibliotecas em projetos web                                                      |
| **Desenvolvimento de um projeto prático web**             | Desenvolvimento full-stack, integração front-end e back-end, integração com banco de dados                     | Diferença entre desenvolvimento front-end e back-end, técnicas de integração de sistemas                   | Planejar e desenvolver um projeto web completo, integrar front-end e back-end, conectar a um banco de dados e implementar funcionalidades práticas                                |

## Semana 15-16: Arquitetura de Computadores e Sistemas Operacionais

| **Tópico**                                                | **Conceitos**                                                                                                   | **Fatos**                                                                                                 | **Procedimentos**                                                                                                                                                               |
|-----------------------------------------------------------|----------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| **Fundamentos de arquitetura de computadores**            | Componentes de computadores, CPU, memória, armazenamento, I/O                                                  | Diferença entre RAM e ROM, função da CPU, tipos de dispositivos de armazenamento                           | Estudar a arquitetura de CPU, compreender o funcionamento da memória e dispositivos de I/O, realizar tarefas básicas de administração de sistemas                                |
| **Conceitos básicos de sistemas operacionais**            | Gerenciamento de processos, memória, arquivos, dispositivos, multitarefa                                       | Diferença entre processos e threads, tipos de sistemas de arquivos, diferenças entre sistemas operacionais populares (ex: Windows, Linux, macOS) | Estudar o funcionamento de sistemas operacionais, realizar gerenciamento básico de processos e memória, manipular arquivos e dispositivos em diferentes sistemas operacionais |

## Semana 17-18: Arquitetura de Software e Engenharia de Software

| **Tópico**                                                | **Conceitos**                                                                                                   | **Fatos**                                                                                                 | **Procedimentos**                                                                                                                                                               |
|-----------------------------------------------------------|----------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| **Padrões de design de software**                         | Padrões de design (ex: Singleton, Factory, Observer), boas práticas de design, arquitetura de software          | Diferença entre padrões de design e arquiteturas, papel dos padrões na resolução de problemas comuns       | Aplicar padrões de design para resolver problemas recorrentes, seguir boas práticas de design para criar software robusto e eficiente                                           |
| **Ciclo de vida do software e documentação**              | Ciclo de vida do software, fases de desenvolvimento, documentação de software                                  | Diferença entre modelos de ciclo de vida (ex: Cascata, Ágil), importância da documentação                  | Planejar e documentar projetos de software, seguir o ciclo de vida de desenvolvimento de software, criar documentação clara e útil para projetos                                |

## Semana 19-20: Metodologias Ágeis e Testes de Software

| **Tópico**                                                | **Conceitos**                                                                                                   | **Fatos**                                                                                                 | **Procedimentos**                                                                                                                                                               |
|-----------------------------------------------------------|----------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| **Metodologias ágeis**                                    | Scrum, Kanban, princípios de desenvolvimento ágil, sprints, retrospectivas                                     | Diferença entre Scrum e Kanban, papéis em Scrum (ex: Scrum Master, Product Owner)                          | Implementar um processo ágil como Scrum ou Kanban em um projeto, realizar sprints e retrospectivas, melhorar processos com feedback contínuo                                    |
| **Testes de software**                                    | Tipos de testes (unitário, integração, sistema, aceitação), automação de testes, frameworks de teste           | Diferença entre testes manuais e automatizados, ferramentas de automação de teste (ex: Selenium, JUnit)   | Realizar testes de software para garantir qualidade e funcionalidade, automatizar testes com ferramentas específicas, integrar testes ao processo de desenvolvimento            |

## Semana 21-22: Projeto Final e Revisão

| **Tópico**                                                | **Conceitos**                                                                                                   | **Fatos**                                                                                                 | **Procedimentos**                                                                                                                                                               |
|-----------------------------------------------------------|----------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| **Integração e aplicação prática**                        | Integração de conhecimentos adquiridos, desenvolvimento de um projeto completo                                 | Importância da integração de conhecimento, conceitos-chave revisados                                      | Desenvolver um projeto final abrangendo todos os conhecimentos adquiridos, integrar diferentes tecnologias e práticas, consolidar o aprendizado com um produto funcional        |
| **Revisão e preparação para avaliações**                  | Revisão de conceitos, prática de problemas, consolidação de conhecimentos                                       | Conceitos-chave revistos, importância da prática contínua                                                 | Revisar conceitos e procedimentos, realizar exercícios de prática para consolidar o aprendizado, preparar-se para avaliações e certificações no campo de programação            |
